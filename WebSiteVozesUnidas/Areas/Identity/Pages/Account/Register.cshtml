@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1 class="text-center">CADASTRO</h1>


<form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

    <!-- Campo TipoUsuario -->
    <div class="col-12 d-flex">
        <input asp-for="Input.Tipo" value="PessoaFisica" class="d-none" id="formCampoPF" type="radio" checked onchange="trocarCor()">
        <label for="formCampoPF" class="tipo-label bg-black text-white border col-6 text-center p-3 cursor-pointer">
            Pessoa Física
        </label>

        <input asp-for="Input.Tipo" value="Empresa" class="d-none" id="formCampoE" type="radio" onchange="trocarCor()">
        <label for="formCampoE" class="tipo-label bg-white border col-6 text-center p-3 cursor-pointer">
            Empresa
        </label>
    </div>

    @* CAMPOS SUPERIOR *@
    <div class="col-12 d-flex justify-content-between mt-5 mb-3 align-items-stretch">

        <!-- Campo Foto -->
        <div class="d-flex col-3 align-items-center justify-content-center m-auto">
            <img src="~/img/default.jpg" id="profileImage" class="w-100 rounded-circle" />
            <input asp-for="Input.Foto" type="file" class="form-control d-none" name="imgUp" id="imgUp" accept=".jpg,.jpeg,.png, .gif" onchange="startCropper()" />
        </div>



        @* CAMPOS AO LADO IMG *@
        <div class="d-flex flex-column col-6 ">

            <!-- Campo Nome -->
            <div class="form-floating mb-3" id="name">
                <input asp-for="Input.Nome" class="form-control" placeholder="Nome" />
                <label asp-for="Input.Nome">Nome do Usuário <span class="text-danger">*</span></label>
                <span asp-validation-for="Input.Nome" class="text-danger"></span>
            </div>

            <!-- Campo CPF -->
            <div class="form-floating mb-3" id="cpf">
                <input asp-for="Input.CPF" class="form-control" placeholder="CPF" />
                <label asp-for="Input.CPF">CPF</label>
                <span asp-validation-for="Input.CPF" class="text-danger"></span>
            </div>

            <!-- Campo CNPJ -->
            <div class="form-floating mb-3 d-none" id="cnpj">
                <input asp-for="Input.CNPJ" class="form-control" placeholder="CNPJ" />
                <label asp-for="Input.CNPJ">CNPJ</label>
                <span asp-validation-for="Input.CNPJ" class="text-danger"></span>
            </div>

            <!-- Campo EMAIL -->
            <div class="form-floating mb-3" id="email">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email <span class="text-danger">*</span></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>


            <!-- Campo Portifolio -->
            <div class="form-floating" id="portifolio">
                <input asp-for="Input.Portifolio" class="form-control" placeholder="Portifolio" />
                <label asp-for="Input.Portifolio">Portifolio</label>
                <span asp-validation-for="Input.Portifolio" class="text-danger"></span>
            </div>

        </div>
    </div>

    <!-- Campo Sobre -->
    <div class="form-floating mb-3" id="sobre">
        <textarea asp-for="Input.Sobre" class="form-control" placeholder="Sobre"></textarea>
        <label asp-for="Input.Sobre">Sobre</label>
        <span asp-validation-for="Input.Sobre" class="text-danger"></span>
    </div>

    <!-- Campo Funcionarios -->
    <div class="form-floating mb-3 d-none" id="funcionarios">
        <input asp-for="Input.Funcionarios" class="form-control" placeholder="Funcionarios" />
        <label asp-for="Input.Funcionarios">Funcionarios</label>
        <span asp-validation-for="Input.Funcionarios" class="text-danger"></span>
    </div>

    <!-- Campo ESTADO -->
    <div class="form-floating mb-3" id="estado">
        <select asp-for="Input.Estado" id="estado-pf" class="form-select" onchange="selecionarEstado(this)" placeholder="Selecione um estado">
            <option value="">Selecione um estado</option>
        </select>
        <label for="estado-pf">Estado</label>
    </div>

    <!-- Campo CIDADE -->
    <div class="form-floating mb-3" id="cidade">
        <select asp-for="Input.Cidade" id="cidade-pf" class="form-select" disabled onchange="selecionarCidade(this)" placeholder="Selecione uma cidade">
            <option value="">Selecione uma cidade</option>
        </select>
        <label for="cidade-pf">Cidade</label>
    </div>

    <!-- Campo Data de Nascimento -->
    <div class="form-floating mb-3" id="nasciento">
        <input asp-for="Input.Nascimento" class="form-control" type="date" placeholder="Data de Nascimento" />
        <label asp-for="Input.Nascimento">Data de Nascimento <span class="text-danger">*</span></label>
        <span asp-validation-for="Input.Nascimento" class="text-danger"></span>
    </div>

    <!-- Campo Objetivos -->
    <div class="form-floating mb-3" id="objetivos">
        <textarea asp-for="Input.Objetivos" class="form-control" placeholder="Objetivos"></textarea>
        <label asp-for="Input.Objetivos">Objetivos Profissionais</label>
        <span asp-validation-for="Input.Objetivos" class="text-danger"></span>
    </div>

    @* <!-- Campo HABILIDADES -->
    <div class="justify-content-between" id="habilidades">
        <div class="col-12">
            <!-- Campo para adicionar novas habilidades -->
            <div class="d-flex form-floating mb-3">
                <input id="newHabilidade" class="form-control rounded-start rounded-0" placeholder="Adicionar Habilidade" />
                <label for="newHabilidade">Adicionar Habilidade</label>
                <button type="button" id="addHabilidade" class="btn btn-primary col-1 rounded-end rounded-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Lista de habilidades -->
        <div class="mb-3" style="max-height: 200px; overflow-y: auto;" id="habilidadesContainer">
            <ul id="habilidadesList" class="list-group d-flex flex-column bg-danger">
                <!-- Habilidades serão adicionadas aqui -->
            </ul>
        </div>

        <!-- Campo oculto para enviar a lista de habilidades -->
        <input type="hidden" id="habilidadesHidden" name="Input.Habilidades" />
    </div> *@

    <!-- Campo Ramo -->
    <div class="form-floating mb-3 d-none" id="ramo">
        <textarea asp-for="Input.Ramo" class="form-control" placeholder="Ramo"></textarea>
        <label asp-for="Input.Ramo">Ramo Profissionail</label>
        <span asp-validation-for="Input.Ramo" class="text-danger"></span>
    </div>

    <!-- Campo SENHAS-->
    <div class="d-flex col-12" id="senha">
        <!-- Campo SENHA 1-->
        <div class="form-floating mb-3 col me-2">
            <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
            <label asp-for="Input.Password">Password <span class="text-danger">*</span></label>
            <span asp-validation-for="Input.Password" class="text-danger"></span>
        </div>

        <!-- Campo SENHA 2-->
        <div class="form-floating mb-3 col ms-2">
            <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
            <label asp-for="Input.ConfirmPassword">Confirm Password <span class="text-danger">*</span></label>
            <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
        </div>
    </div>

    <!-- Campo BTN REGISTER-->
    <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>


</form>


<style>
    .tamanhoH {
        width: 200px
    }

    #sugestoes-estados-pf, #sugestoes-cidades-pf, #sugestoes-estados-pf, #sugestoes-cidades-pf {
        position: absolute;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
    }

    #sugestoes-estados, #sugestoes-cidades {
        position: absolute;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
    }
</style>

<script>
    let estados = [];
    let cidades = {};

    // Carregar os estados ao iniciar a página
    document.addEventListener('DOMContentLoaded', carregarEstados);

    // Função para carregar os estados do IBGE
    function carregarEstados() {
        fetch('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome')
            .then(response => response.json())
            .then(data => {
                estados = data.map(estado => ({
                    id: estado.id,
                    nome: estado.nome,
                    sigla: estado.sigla
                }));
                preencherSelectEstados();
            });
    }

    // Preenche o select de estados
    function preencherSelectEstados() {
        const selectEstado = document.getElementById('estado-pf');
        estados.forEach(estado => {
            const option = document.createElement('option');
            option.value = estado.nome; // Define o nome do estado como valor
            option.textContent = `${estado.nome} (${estado.sigla})`;
            selectEstado.appendChild(option);
        });
    }

    // Quando um estado é selecionado, carrega as cidades
    function selecionarEstado(select) {
        const estadoNome = select.value;
        const estadoSelecionado = estados.find(estado => estado.nome === estadoNome);

        if (estadoSelecionado) {
            carregarCidades(estadoSelecionado.id);
            document.getElementById('cidade-pf').disabled = false;
        } else {
            document.getElementById('cidade-pf').innerHTML = '<option value="">Selecione uma cidade</option>';
            document.getElementById('cidade-pf').disabled = true;
        }
    }

    // Carrega as cidades do estado selecionado
    function carregarCidades(estadoId) {
        fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${estadoId}/municipios`)
            .then(response => response.json())
            .then(data => {
                cidades[estadoId] = data.map(cidade => cidade.nome);
                preencherSelectCidades(estadoId);
            });
    }

    // Preenche o select de cidades com base no estado selecionado
    function preencherSelectCidades(estadoId) {
        const selectCidade = document.getElementById('cidade-pf');
        selectCidade.innerHTML = '<option value="">Selecione uma cidade</option>';
        cidades[estadoId].forEach(cidade => {
            const option = document.createElement('option');
            option.value = cidade; // Nome da cidade como valor
            option.textContent = cidade;
            selectCidade.appendChild(option);
        });
    }

    // Exemplo de função que pode ser usada ao selecionar uma cidade
    function selecionarCidade(select) {
        const cidadeSelecionada = select.value;
        console.log('Cidade selecionada:', cidadeSelecionada);
    }
</script>

<!-- JavaScript para o clique na imagem -->
<script>
    // Ao clicar na imagem, abre o campo de upload
    document.getElementById("profileImage").onclick = function () {
        document.getElementById("imgUp").click();
    };

    // Quando uma nova imagem for selecionada, atualiza a visualização da imagem
    document.getElementById("imgUp").onchange = function (event) {
        const [file] = event.target.files;
        if (file) {
            // Valida o tipo de arquivo antes de atualizar a imagem
            var fileName = event.target.value;
            var idxDot = fileName.lastIndexOf(".") + 1;
            var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();

            if (extFile == "jpg" || extFile == "jpeg" || extFile == "png") {
                document.getElementById("profileImage").src = URL.createObjectURL(file);
            } else {
                alert("Only jpg/jpeg and png files are allowed!");
                // Limpa o campo de upload
                document.getElementById("imgUp").value = "";
            }
        }
    };


</script>

@* <!-- Script para adicionar e gerenciar habilidades -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const addButton = document.getElementById('addHabilidade');
        const newHabilidadeInput = document.getElementById('newHabilidade');
        const habilidadesList = document.getElementById('habilidadesList');
        const habilidadesHidden = document.getElementById('habilidadesHidden');

        addButton.addEventListener('click', function () {
            const newHabilidade = newHabilidadeInput.value.trim();

            if (newHabilidade) {
                // Adiciona a habilidade à lista
                const listItem = document.createElement('li');
                listItem.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');

                // Adiciona o texto da habilidade
                listItem.textContent = newHabilidade;

                // Cria um botão para remover a habilidade
                const removeButton = document.createElement('button');
                removeButton.textContent = 'Remover';
                removeButton.classList.add('btn', 'btn-danger', 'btn-sm');
                removeButton.addEventListener('click', function () {
                    listItem.remove();
                    updateHiddenField();
                });

                listItem.appendChild(removeButton);
                habilidadesList.appendChild(listItem);

                // Limpa o campo de entrada
                newHabilidadeInput.value = '';

                // Atualiza o campo oculto
                updateHiddenField();

                // Rola para a última habilidade adicionada
                habilidadesContainer.scrollTop = habilidadesContainer.scrollHeight;
            }
        });

        function updateHiddenField() {
            const habilidades = Array.from(habilidadesList.children)
                .map(li => li.textContent.replace('Remover', '').trim());

            habilidadesHidden.value = JSON.stringify(habilidades);
        }
    });
</script> *@

<script>
    function trocarCor() {
        var pessoaFisica = document.getElementById("formCampoPF");
        var empresa = document.getElementById("formCampoE");

        var labelPessoaFisica = document.querySelector("label[for='formCampoPF']");
        var labelEmpresa = document.querySelector("label[for='formCampoE']");

        let nome = document.getElementById("nome");
        let cpf = document.getElementById("cpf");
        let cnpj = document.getElementById("cnpj");
        let email = document.getElementById("email");
        let portifolio = document.getElementById("portifolio");
        let sobre = document.getElementById("sobre");
        let funcionarios = document.getElementById("funcionarios");
        let estado = document.getElementById("estado");
        let cidade = document.getElementById("cidade");
        let nascimento = document.getElementById("nasciento");
        let objetivos = document.getElementById("objetivos");
        let ramo = document.getElementById("ramo");
        let senha = document.getElementById("senha");


        if (pessoaFisica.checked) {
            labelPessoaFisica.classList.add("bg-black", "text-white");
            labelPessoaFisica.classList.remove("bg-white", "text-black");

            labelEmpresa.classList.add("bg-white", "text-black");
            labelEmpresa.classList.remove("bg-black", "text-white");

            cpf.classList.remove("d-none");
            nascimento.classList.remove("d-none");
            objetivos.classList.remove("d-none");

            cnpj.classList.add("d-none");
            // sobre.classList.add("d-none");
            funcionarios.classList.add("d-none");
            ramo.classList.add("d-none");

            Input.Tipo = "PessoaFisica";

        } else {
            labelEmpresa.classList.add("bg-black", "text-white");
            labelEmpresa.classList.remove("bg-white", "text-black");

            labelPessoaFisica.classList.add("bg-white", "text-black");
            labelPessoaFisica.classList.remove("bg-black", "text-white");

            cpf.classList.add("d-none");
            nascimento.classList.add("d-none");
            objetivos.classList.add("d-none");

            cnpj.classList.remove("d-none");
            // sobre.classList.remove("d-none");
            funcionarios.classList.remove("d-none");
            ramo.classList.remove("d-none");


        }
    }
</script>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}